{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nexport class LoginComponent {\n  constructor(authService, router, fb) {\n    this.authService = authService;\n    this.router = router;\n    this.fb = fb;\n    this.errorMessage = \"\";\n    this.auth = authService;\n    this.loginForm = this.fb.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n  }\n  onSuccess(response) {\n    this.auth.setToken(response.token);\n    this.router.navigate(['/home']); // Redirect to home or appropriate route\n  }\n\n  onFailure(error) {\n    this.errorMessage = 'Invalid username or password';\n  }\n  onSubmit() {\n    if (!this.loginForm.valid) {\n      return;\n    }\n    // Handle login logic here\n    // console.log('Form Submitted!', this.loginForm.value);\n    const {\n      username,\n      password\n    } = this.loginForm.value;\n    this.auth.login(username, password).subscribe({\n      next: response => {\n        this.auth.setToken(response.token);\n        this.router.navigate(['/home']); // Redirect to home or appropriate route\n      },\n\n      error: this.onFailure\n    });\n  }\n  static #_ = this.ɵfac = function LoginComponent_Factory(t) {\n    return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.FormBuilder));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginComponent,\n    selectors: [[\"app-login\"]],\n    decls: 14,\n    vars: 1,\n    consts: [[1, \"login-container\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"username\"], [\"id\", \"username\", \"formControlName\", \"username\", 1, \"form-control\"], [\"for\", \"password\"], [\"id\", \"password\", \"type\", \"password\", \"formControlName\", \"password\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn-submit\"]],\n    template: function LoginComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n        i0.ɵɵtext(2, \"Login\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"form\", 1);\n        i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_3_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(4, \"div\", 2)(5, \"label\", 3);\n        i0.ɵɵtext(6, \"Username\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"input\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"div\", 2)(9, \"label\", 5);\n        i0.ɵɵtext(10, \"Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(11, \"input\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"button\", 7);\n        i0.ɵɵtext(13, \"Login\");\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n      }\n    },\n    dependencies: [i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName],\n    styles: [\".login-container[_ngcontent-%COMP%] {\\n  max-width: 400px;\\n  margin: auto;\\n  padding: 20px;\\n  background-color: white;\\n  border: 1px solid #ccc;\\n  border-radius: 8px;\\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\\n}\\n\\nh2[_ngcontent-%COMP%] {\\n  text-align: center;\\n  color: black;\\n  margin-bottom: 20px;\\n}\\n\\n.form-group[_ngcontent-%COMP%] {\\n  margin-bottom: 15px;\\n}\\n\\nlabel[_ngcontent-%COMP%] {\\n  color: black;\\n}\\n\\n.form-control[_ngcontent-%COMP%] {\\n  width: 100%;\\n  padding: 10px;\\n  border: 1px solid #ccc;\\n  border-radius: 4px;\\n}\\n\\n.btn-submit[_ngcontent-%COMP%] {\\n  width: 100%;\\n  padding: 10px;\\n  background-color: black;\\n  color: white;\\n  border: none;\\n  border-radius: 4px;\\n  cursor: pointer;\\n}\\n\\n.btn-submit[_ngcontent-%COMP%]:hover {\\n  background-color: #444;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9sb2dpbi9sb2dpbi5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBcUNJO0FBQ0o7RUFDRSxnQkFBZ0I7RUFDaEIsWUFBWTtFQUNaLGFBQWE7RUFDYix1QkFBdUI7RUFDdkIsc0JBQXNCO0VBQ3RCLGtCQUFrQjtFQUNsQix3Q0FBd0M7QUFDMUM7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsWUFBWTtFQUNaLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLFlBQVk7QUFDZDs7QUFFQTtFQUNFLFdBQVc7RUFDWCxhQUFhO0VBQ2Isc0JBQXNCO0VBQ3RCLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLFdBQVc7RUFDWCxhQUFhO0VBQ2IsdUJBQXVCO0VBQ3ZCLFlBQVk7RUFDWixZQUFZO0VBQ1osa0JBQWtCO0VBQ2xCLGVBQWU7QUFDakI7O0FBRUE7RUFDRSxzQkFBc0I7QUFDeEIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiAubG9naW4tY29udGFpbmVyIHtcbiAgICBtYXgtd2lkdGg6IDQwMHB4O1xuICAgIG1hcmdpbjogMCBhdXRvO1xuICAgIHBhZGRpbmc6IDIwcHg7XG4gIH1cbiAgXG4gIC5mb3JtLWdyb3VwIHtcbiAgICBtYXJnaW4tYm90dG9tOiAxNXB4O1xuICB9XG4gIFxuICAuZm9ybS1jb250cm9sIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBwYWRkaW5nOiA4cHg7XG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgfVxuICBcbiAgLmJ0biB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgcGFkZGluZzogMTBweDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3YmZmO1xuICAgIGNvbG9yOiB3aGl0ZTtcbiAgICBib3JkZXI6IG5vbmU7XG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xuICB9XG4gIFxuICAuYnRuOmRpc2FibGVkIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNmM3NTdkO1xuICB9XG4gIFxuICAuZXJyb3Ige1xuICAgIGNvbG9yOiByZWQ7XG4gICAgZm9udC1zaXplOiAwLjg3NWVtO1xuICB9XG4gIFxuICBoMiB7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICB9XG4gICAqL1xuLmxvZ2luLWNvbnRhaW5lciB7XG4gIG1heC13aWR0aDogNDAwcHg7XG4gIG1hcmdpbjogYXV0bztcbiAgcGFkZGluZzogMjBweDtcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gIGJvcmRlcjogMXB4IHNvbGlkICNjY2M7XG4gIGJvcmRlci1yYWRpdXM6IDhweDtcbiAgYm94LXNoYWRvdzogMCA0cHggOHB4IHJnYmEoMCwgMCwgMCwgMC4xKTtcbn1cblxuaDIge1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIGNvbG9yOiBibGFjaztcbiAgbWFyZ2luLWJvdHRvbTogMjBweDtcbn1cblxuLmZvcm0tZ3JvdXAge1xuICBtYXJnaW4tYm90dG9tOiAxNXB4O1xufVxuXG5sYWJlbCB7XG4gIGNvbG9yOiBibGFjaztcbn1cblxuLmZvcm0tY29udHJvbCB7XG4gIHdpZHRoOiAxMDAlO1xuICBwYWRkaW5nOiAxMHB4O1xuICBib3JkZXI6IDFweCBzb2xpZCAjY2NjO1xuICBib3JkZXItcmFkaXVzOiA0cHg7XG59XG5cbi5idG4tc3VibWl0IHtcbiAgd2lkdGg6IDEwMCU7XG4gIHBhZGRpbmc6IDEwcHg7XG4gIGJhY2tncm91bmQtY29sb3I6IGJsYWNrO1xuICBjb2xvcjogd2hpdGU7XG4gIGJvcmRlcjogbm9uZTtcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xuICBjdXJzb3I6IHBvaW50ZXI7XG59XG5cbi5idG4tc3VibWl0OmhvdmVyIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzQ0NDtcbn0iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n  });\n}","map":{"version":3,"mappings":"AACA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;;AASnE,OAAM,MAAOC,cAAc;EAIzBC,YAAoBC,WAAwB,EAAUC,MAAc,EAASC,EAAe;IAAxE,gBAAW,GAAXF,WAAW;IAAuB,WAAM,GAANC,MAAM;IAAiB,OAAE,GAAFC,EAAE;IAF/E,iBAAY,GAAW,EAAE;IAGvB,IAAI,CAACC,IAAI,GAAGH,WAAW;IACvB,IAAI,CAACI,SAAS,GAAG,IAAI,CAACF,EAAE,CAACG,KAAK,CAAC;MAC7BC,QAAQ,EAAE,CAAC,EAAE,EAAET,UAAU,CAACU,QAAQ,CAAC;MACnCC,QAAQ,EAAE,CAAC,EAAE,EAAEX,UAAU,CAACU,QAAQ;KACnC,CAAC;EACJ;EACQE,SAAS,CAACC,QAAsB;IACtC,IAAI,CAACP,IAAI,CAACQ,QAAQ,CAACD,QAAQ,CAACE,KAAK,CAAC;IAClC,IAAI,CAACX,MAAM,CAACY,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;EACnC;;EACQC,SAAS,CAACC,KAAS;IACzB,IAAI,CAACC,YAAY,GAAG,8BAA8B;EACpD;EACAC,QAAQ;IACN,IAAI,CAAC,IAAI,CAACb,SAAS,CAACc,KAAK,EAAE;MACzB;;IAEF;IACA;IACA,MAAM;MAAEZ,QAAQ;MAAEE;IAAQ,CAAE,GAAG,IAAI,CAACJ,SAAS,CAACe,KAAK;IACnD,IAAI,CAAChB,IAAI,CAACiB,KAAK,CAACd,QAAQ,EAAEE,QAAQ,CAAC,CAACa,SAAS,CAAC;MAC5CC,IAAI,EAAGZ,QAAQ,IAAI;QACjB,IAAI,CAACP,IAAI,CAACQ,QAAQ,CAACD,QAAQ,CAACE,KAAK,CAAC;QAClC,IAAI,CAACX,MAAM,CAACY,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;MACnC,CAAC;;MACDE,KAAK,EAAE,IAAI,CAACD;KACb,CAAC;EACJ;EAAC;qBAhCUhB,cAAc;EAAA;EAAA;UAAdA,cAAc;IAAAyB;IAAAC;IAAAC;IAAAC;IAAAC;MAAA;QCe3BC,8BAA6B;QACvBA,qBAAK;QAAAA,iBAAK;QACdA,+BAAsD;QAAxBA;UAAA,OAAYC,cAAU;QAAA,EAAC;QACnDD,8BAAwB;QACAA,wBAAQ;QAAAA,iBAAQ;QACtCA,2BAAuE;QACzEA,iBAAM;QACNA,8BAAwB;QACAA,yBAAQ;QAAAA,iBAAQ;QACtCA,4BAAuF;QACzFA,iBAAM;QACNA,kCAAyC;QAAAA,sBAAK;QAAAA,iBAAS;;;QATnDA,eAAuB;QAAvBA,yCAAuB","names":["Validators","LoginComponent","constructor","authService","router","fb","auth","loginForm","group","username","required","password","onSuccess","response","setToken","token","navigate","onFailure","error","errorMessage","onSubmit","valid","value","login","subscribe","next","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["/home/adnangonzaga/repos/LocalizaClientes/Localiza.Web/ClientApp/src/app/components/login/login.component.ts","/home/adnangonzaga/repos/LocalizaClientes/Localiza.Web/ClientApp/src/app/components/login/login.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService, LoginResponse } from '../../services/auth.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent {\n  loginForm: FormGroup;\n  errorMessage: string = \"\";\n  auth: AuthService;\n  constructor(private authService: AuthService, private router: Router,private fb: FormBuilder) {\n    this.auth = authService\n    this.loginForm = this.fb.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n  }\n  private onSuccess(response:LoginResponse) {\n    this.auth.setToken(response.token);\n    this.router.navigate(['/home']); // Redirect to home or appropriate route\n  }\n  private onFailure(error:any){\n    this.errorMessage = 'Invalid username or password';\n  }\n  onSubmit() {\n    if (!this.loginForm.valid) {\n      return\n    }\n    // Handle login logic here\n    // console.log('Form Submitted!', this.loginForm.value);\n    const { username, password } = this.loginForm.value;\n    this.auth.login(username, password).subscribe({\n      next: (response )=> {\n        this.auth.setToken(response.token);\n        this.router.navigate(['/home']); // Redirect to home or appropriate route\n      },\n      error: this.onFailure\n    });    \n  }\n}\n// import { Component } from '@angular/core';\n// import { FormBuilder, FormGroup, Validators } from '@angular/forms';\n// import { AuthService } from '../services/auth.service';\n\n// @Component({\n//   selector: 'app-login',\n//   templateUrl: './login.component.html',\n//   styleUrls: ['./login.component.css']\n// })\n// export class LoginComponent {\n//   loginForm: FormGroup;\n//   errorMessage: string | null = null;\n\n//   constructor(private fb: FormBuilder, private authService: AuthService) {\n//     this.loginForm = this.fb.group({\n//       email: ['', [Validators.required, Validators.email]],\n//       password: ['', [Validators.required]]\n//     });\n//   }\n\n//   onSubmit(): void {\n//     if (this.loginForm.valid) {\n//       const { email, password } = this.loginForm.value;\n//       this.authService.login(email, password).subscribe({\n//         next: (response:any) => {\n//           // Handle successful login\n//           console.log('Login successful', response);\n//         },\n//         error: (error:any) => {\n//           // Handle error response\n//           this.errorMessage = 'Invalid email or password';\n//           console.error('Login error', error);\n//         }\n//       });\n//     }\n//   }\n// }\n","<!-- <div class=\"login-container\">\n  <h2>Login</h2>\n  <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\n    <div class=\"form-group\">\n      <label for=\"email\">Email</label>\n      <input id=\"email\" formControlName=\"email\" type=\"email\" class=\"form-control\" />\n      <div *ngIf=\"loginForm.get('email')?.invalid && loginForm.get('email')?.touched\" class=\"error\">\n        <small *ngIf=\"loginForm.get('email')?.errors?.['required']\">Email is required</small>\n        <small *ngIf=\"loginForm.get('email')?.errors?.['email']\">Invalid email address</small>\n      </div>\n    </div>\n    <div class=\"form-group\">\n      <label for=\"password\">Password</label>\n      <input id=\"password\" formControlName=\"password\" type=\"password\" class=\"form-control\" />\n      <div *ngIf=\"loginForm.get('password')?.invalid && loginForm.get('password')?.touched\" class=\"error\">\n        <small *ngIf=\"loginForm.get('password')?.errors?.['required']\">Password is required</small>\n      </div>\n    </div>\n    <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"loginForm.invalid\">Login</button>\n    <div *ngIf=\"errorMessage\" class=\"error\">\n      <small>{{ errorMessage }}</small>\n    </div>\n  </form>\n</div>\n   -->\n<div class=\"login-container\">\n  <h2>Login</h2>\n  <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\n    <div class=\"form-group\">\n      <label for=\"username\">Username</label>\n      <input id=\"username\" formControlName=\"username\" class=\"form-control\" />\n    </div>\n    <div class=\"form-group\">\n      <label for=\"password\">Password</label>\n      <input id=\"password\" type=\"password\" formControlName=\"password\" class=\"form-control\" />\n    </div>\n    <button type=\"submit\" class=\"btn-submit\">Login</button>\n  </form>\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}