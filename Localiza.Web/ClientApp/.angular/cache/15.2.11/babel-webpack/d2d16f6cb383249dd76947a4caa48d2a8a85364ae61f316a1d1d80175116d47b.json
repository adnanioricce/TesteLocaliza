{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.baseUrl = 'https://localhost:7012/api/auth'; // Adjust to your API endpoint\n    this.token = null;\n  }\n  login(username, password) {\n    return this.http.post(`${this.baseUrl}/login`, {\n      username,\n      password\n    });\n  }\n  logout() {\n    this.token = null;\n    localStorage.removeItem('authToken');\n    this.router.navigate(['/login']); // Redirect to login page or appropriate route\n  }\n\n  setToken(token) {\n    this.token = token;\n    localStorage.setItem('authToken', token);\n  }\n  getUserId() {\n    const token = this.getToken();\n    if (!token) {\n      return null;\n    }\n    const decodedJwt = this.parseJwt(token);\n  }\n  getToken() {\n    if (!this.token) {\n      this.token = localStorage.getItem('authToken');\n    }\n    return this.token;\n  }\n  isAuthenticated() {\n    return !!this.getToken(); // Returns true if token exists\n  }\n\n  parseJwt(token) {\n    try {\n      const base64Url = token.split('.')[1];\n      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n      const jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n      }).join(''));\n      return JSON.parse(jsonPayload);\n    } catch (e) {\n      console.error('Invalid token', e);\n      return null;\n    }\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";;;AAYA,OAAM,MAAOA,WAAW;EAItBC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,SAAI,GAAJD,IAAI;IAAsB,WAAM,GAANC,MAAM;IAH5C,YAAO,GAAW,iCAAiC,CAAC,CAAC;IACrD,UAAK,GAAkB,IAAI;EAE4B;EAE/DC,KAAK,CAACC,QAAgB,EAAEC,QAAgB;IACtC,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAgB,GAAG,IAAI,CAACC,OAAO,QAAQ,EAAE;MAAEH,QAAQ;MAAEC;IAAQ,CAAE,CAAC;EACvF;EAEAG,MAAM;IACJ,IAAI,CAACC,KAAK,GAAG,IAAI;IACjBC,YAAY,CAACC,UAAU,CAAC,WAAW,CAAC;IACpC,IAAI,CAACT,MAAM,CAACU,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;EACpC;;EAEAC,QAAQ,CAACJ,KAAa;IACpB,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClBC,YAAY,CAACI,OAAO,CAAC,WAAW,EAAEL,KAAK,CAAC;EAC1C;EACAM,SAAS;IACP,MAAMN,KAAK,GAAG,IAAI,CAACO,QAAQ,EAAE;IAC7B,IAAG,CAACP,KAAK,EAAC;MACR,OAAO,IAAI;;IAEb,MAAMQ,UAAU,GAAG,IAAI,CAACC,QAAQ,CAACT,KAAK,CAAC;EACzC;EACAO,QAAQ;IACN,IAAI,CAAC,IAAI,CAACP,KAAK,EAAE;MACf,IAAI,CAACA,KAAK,GAAGC,YAAY,CAACS,OAAO,CAAC,WAAW,CAAC;;IAEhD,OAAO,IAAI,CAACV,KAAK;EACnB;EAEAW,eAAe;IACb,OAAO,CAAC,CAAC,IAAI,CAACJ,QAAQ,EAAE,CAAC,CAAC;EAC5B;;EACAE,QAAQ,CAACT,KAAY;IACnB,IAAI;MACA,MAAMY,SAAS,GAAGZ,KAAK,CAACa,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACrC,MAAMC,MAAM,GAAGF,SAAS,CAACG,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;MAC9D,MAAMC,WAAW,GAAGC,kBAAkB,CAACC,IAAI,CAACJ,MAAM,CAAC,CAACD,KAAK,CAAC,EAAE,CAAC,CAACM,GAAG,CAAC,UAASC,CAAC;QACxE,OAAO,GAAG,GAAG,CAAC,IAAI,GAAGA,CAAC,CAACC,UAAU,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,EAAEC,KAAK,CAAC,CAAC,CAAC,CAAC;MAChE,CAAC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC,CAAC;MAEZ,OAAOC,IAAI,CAACC,KAAK,CAACV,WAAW,CAAC;KACjC,CAAC,OAAOW,CAAC,EAAE;MACRC,OAAO,CAACC,KAAK,CAAC,eAAe,EAAEF,CAAC,CAAC;MACjC,OAAO,IAAI;;EAEnB;EAAC;qBAlDYrC,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAwC,SAAXxC,WAAW;IAAAyC,YAFV;EAAM","names":["AuthService","constructor","http","router","login","username","password","post","baseUrl","logout","token","localStorage","removeItem","navigate","setToken","setItem","getUserId","getToken","decodedJwt","parseJwt","getItem","isAuthenticated","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","JSON","parse","e","console","error","factory","providedIn"],"sourceRoot":"","sources":["/home/adnangonzaga/repos/LocalizaClientes/Localiza.Web/ClientApp/src/app/services/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Router } from '@angular/router';\n\nexport interface LoginResponse {\n  token: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private baseUrl: string = 'https://localhost:7012/api/auth'; // Adjust to your API endpoint\n  private token: string | null = null;\n\n  constructor(private http: HttpClient, private router: Router) {}\n\n  login(username: string, password: string): Observable<LoginResponse> {\n    return this.http.post<LoginResponse>(`${this.baseUrl}/login`, { username, password });\n  }\n\n  logout(): void {\n    this.token = null;\n    localStorage.removeItem('authToken');\n    this.router.navigate(['/login']); // Redirect to login page or appropriate route\n  }\n\n  setToken(token: string): void {\n    this.token = token;\n    localStorage.setItem('authToken', token);\n  }\n  getUserId(): number | null {\n    const token = this.getToken()\n    if(!token){\n      return null\n    }\n    const decodedJwt = this.parseJwt(token)\n  }\n  getToken(): string | null {\n    if (!this.token) {\n      this.token = localStorage.getItem('authToken');\n    }\n    return this.token;\n  }\n\n  isAuthenticated(): boolean {\n    return !!this.getToken(); // Returns true if token exists\n  }\n  parseJwt(token:string) {\n    try {\n        const base64Url = token.split('.')[1];\n        const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n        const jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {\n            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n        }).join(''));\n\n        return JSON.parse(jsonPayload);\n    } catch (e) {\n        console.error('Invalid token', e);\n        return null;\n    }\n}\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}